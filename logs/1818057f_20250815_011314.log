[MESSAGE] program {
  grid = Input()

  // Find all centers of plus-shapes made of color 4 (center + 4 orthogonal neighbors)
  centers = Find("cells", where="color==4 AND North(cell).color==4 AND South(cell).color==4 AND East(cell).color==4 AND West(cell).color==4")

  // Repaint each detected plus (center and its 4 orthogonal neighbors) to color 8
  pluses = Union(Map(centers, lambda c: {c, North(c), South(c), East(c), West(c)}))
  Paint(pluses, 8)

  Output(grid)
}

============================================================
Phase: train_0
============================================================
program {
  grid = Input()

  // Find all centers of plus-shapes made of color 4 (center + 4 orthogonal neighbors)
  centers = Find("cells", where="color==4 AND North(cell).color==4 AND South(cell).color==4 AND East(cell).color==4 AND West(cell).color==4")

  // Repaint each detected plus (center and its 4 orthogonal neighbors) to color 8
  pluses = Union(Map(centers, lambda c: {c, North(c), South(c), East(c), West(c)}))
  Paint(pluses, 8)

  Output(grid)
}
[MESSAGE] [[4, 4, 2, 2, 2, 4, 4, 2, 2, 2, 4, 4, 2, 2, 2, 4, 4],
 [4, 4, 2, 2, 2, 4, 4, 2, 2, 2, 4, 4, 2, 2, 2, 4, 4],
 [2, 2, 2, 8, 2, 2, 2, 2, 8, 2, 2, 2, 2, 8, 2, 2, 2],
 [2, 2, 8, 8, 8, 2, 2, 8, 8, 8, 2, 2, 8, 8, 8, 2, 2],
 [2, 2, 2, 8, 2, 2, 2, 2, 8, 2, 2, 2, 2, 8, 2, 2, 2],
 [4, 4, 2, 4, 2, 4, 4, 2, 4, 2, 4, 4, 2, 4, 2, 4, 4],
 [2, 2, 2, 8, 2, 2, 2, 2, 8, 2, 2, 2, 2, 8, 2, 2, 2],
 [2, 2, 8, 8, 8, 2, 2, 8, 8, 8, 2, 2, 8, 8, 8, 2, 2],
 [2, 2, 2, 8, 2, 2, 2, 2, 8, 2, 2, 2, 2, 8, 2, 2, 2],
 [4, 4, 2, 2, 2, 4, 4, 2, 2, 2, 4, 4, 2, 2, 2, 4, 4],
 [4, 4, 2, 2, 2, 4, 4, 2, 2, 2, 4, 4, 2, 2, 2, 4, 4],
 [2, 2, 2, 8, 2, 2, 2, 2, 8, 2, 2, 2, 2, 8, 2, 2, 2],
 [2, 2, 8, 8, 8, 2, 2, 8, 8, 8, 2, 2, 8, 8, 8, 2, 2],
 [2, 2, 2, 8, 2, 2, 2, 2, 8, 2, 2, 2, 2, 8, 2, 2, 2],
 [4, 4, 2, 4, 2, 4, 4, 2, 4, 2, 4, 4, 2, 4, 2, 4, 4]]

============================================================
Phase: train_1_predict
============================================================
[[4, 4, 2, 2, 2, 4, 4, 2, 2, 2, 4, 4, 2, 2, 2, 4, 4],
 [4, 4, 2, 2, 2, 4, 4, 2, 2, 2, 4, 4, 2, 2, 2, 4, 4],
 [2, 2, 2, 8, 2, 2, 2, 2, 8, 2, 2, 2, 2, 8, 2, 2, 2],
 [2, 2, 8, 8, 8, 2, 2, 8, 8, 8, 2, 2, 8, 8, 8, 2, 2],
 [2, 2, 2, 8, 2, 2, 2, 2, 8, 2, 2, 2, 2, 8, 2, 2, 2],
 [4, 4, 2, 4, 2, 4, 4, 2, 4, 2, 4, 4, 2, 4, 2, 4, 4],
 [2, 2, 2, 8, 2, 2, 2, 2, 8, 2, 2, 2, 2, 8, 2, 2, 2],
 [2, 2, 8, 8, 8, 2, 2, 8, 8, 8, 2, 2, 8, 8, 8, 2, 2],
 [2, 2, 2, 8, 2, 2, 2, 2, 8, 2, 2, 2, 2, 8, 2, 2, 2],
 [4, 4, 2, 2, 2, 4, 4, 2, 2, 2, 4, 4, 2, 2, 2, 4, 4],
 [4, 4, 2, 2, 2, 4, 4, 2, 2, 2, 4, 4, 2, 2, 2, 4, 4],
 [2, 2, 2, 8, 2, 2, 2, 2, 8, 2, 2, 2, 2, 8, 2, 2, 2],
 [2, 2, 8, 8, 8, 2, 2, 8, 8, 8, 2, 2, 8, 8, 8, 2, 2],
 [2, 2, 2, 8, 2, 2, 2, 2, 8, 2, 2, 2, 2, 8, 2, 2, 2],
 [4, 4, 2, 4, 2, 4, 4, 2, 4, 2, 4, 4, 2, 4, 2, 4, 4]]
[MESSAGE] program {
  grid = Input()

  Plus = Lambda("cross5", lambda c: {c, North(c), South(c), East(c), West(c)})

  centers = Find("cells",
                 where="color==4 AND North(cell).color==4 AND South(cell).color==4 AND East(cell).color==4 AND West(cell).color==4")

  Paint(Union(Map(centers, Plus)), 8)

  Output(grid)
}

============================================================
Phase: train_1_verify
============================================================
program {
  grid = Input()

  Plus = Lambda("cross5", lambda c: {c, North(c), South(c), East(c), West(c)})

  centers = Find("cells",
                 where="color==4 AND North(cell).color==4 AND South(cell).color==4 AND East(cell).color==4 AND West(cell).color==4")

  Paint(Union(Map(centers, Plus)), 8)

  Output(grid)
}
[MESSAGE] [[2, 2, 2, 2, 2, 4, 4, 4, 2, 2, 2, 4],
 [2, 2, 2, 2, 2, 4, 4, 4, 2, 2, 2, 4],
 [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 4],
 [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 4],
 [2, 2, 2, 2, 2, 4, 8, 4, 4, 4, 4, 4],
 [2, 2, 2, 2, 2, 8, 8, 8, 2, 2, 2, 4],
 [4, 2, 2, 2, 2, 2, 8, 4, 2, 2, 2, 4],
 [4, 8, 2, 2, 2, 2, 2, 4, 4, 4, 4, 4],
 [8, 8, 8, 2, 2, 2, 4, 4, 4, 4, 2, 2],
 [4, 8, 4, 2, 2, 2, 4, 2, 2, 2, 2, 2],
 [2, 2, 2, 4, 4, 4, 4, 2, 2, 2, 4, 4],
 [2, 2, 2, 4, 4, 4, 4, 4, 4, 4, 4, 4]]

============================================================
Phase: train_2_predict
============================================================
[[2, 2, 2, 2, 2, 4, 4, 4, 2, 2, 2, 4],
 [2, 2, 2, 2, 2, 4, 4, 4, 2, 2, 2, 4],
 [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 4],
 [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 4],
 [2, 2, 2, 2, 2, 4, 8, 4, 4, 4, 4, 4],
 [2, 2, 2, 2, 2, 8, 8, 8, 2, 2, 2, 4],
 [4, 2, 2, 2, 2, 2, 8, 4, 2, 2, 2, 4],
 [4, 8, 2, 2, 2, 2, 2, 4, 4, 4, 4, 4],
 [8, 8, 8, 2, 2, 2, 4, 4, 4, 4, 2, 2],
 [4, 8, 4, 2, 2, 2, 4, 2, 2, 2, 2, 2],
 [2, 2, 2, 4, 4, 4, 4, 2, 2, 2, 4, 4],
 [2, 2, 2, 4, 4, 4, 4, 4, 4, 4, 4, 4]]
[MESSAGE] program {
  grid = Input()

  IsPlusCenter = Lambda("is center of a 4-plus",
    where="cell.color==4 AND North(cell).color==4 AND South(cell).color==4 AND East(cell).color==4 AND West(cell).color==4"
  )

  centers = Find("cells", where=IsPlusCenter)

  pluses = Union(Map(centers, lambda c: {c, North(c), South(c), East(c), West(c)}))

  Paint(pluses, 8)

  Output(grid)
}

============================================================
Phase: train_2_verify
============================================================
program {
  grid = Input()

  IsPlusCenter = Lambda("is center of a 4-plus",
    where="cell.color==4 AND North(cell).color==4 AND South(cell).color==4 AND East(cell).color==4 AND West(cell).color==4"
  )

  centers = Find("cells", where=IsPlusCenter)

  pluses = Union(Map(centers, lambda c: {c, North(c), South(c), East(c), West(c)}))

  Paint(pluses, 8)

  Output(grid)
}
[MESSAGE] [[4, 2, 4, 2, 4, 4, 2, 4, 2, 4, 4, 2, 4, 2, 4, 2, 2, 4, 2, 4, 4, 2],
 [2, 2, 8, 2, 2, 2, 2, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 4, 2, 2, 2, 2],
 [4, 8, 8, 8, 4, 4, 4, 2, 4, 4, 2, 4, 4, 4, 4, 2, 4, 4, 2, 2, 4, 2],
 [2, 2, 8, 2, 2, 2, 2, 4, 2, 2, 2, 2, 4, 2, 2, 2, 2, 4, 2, 2, 2, 2],
 [4, 2, 4, 2, 2, 4, 2, 2, 2, 4, 2, 2, 4, 2, 4, 2, 2, 4, 2, 4, 4, 2],
 [4, 2, 4, 2, 2, 4, 2, 2, 2, 4, 4, 2, 4, 2, 4, 4, 2, 4, 2, 2, 4, 2],
 [2, 2, 8, 2, 2, 2, 2, 4, 2, 2, 2, 2, 8, 2, 2, 2, 2, 4, 2, 2, 2, 2],
 [4, 8, 8, 8, 2, 4, 4, 2, 4, 2, 4, 8, 8, 8, 4, 4, 4, 2, 2, 4, 4, 4],
 [2, 2, 8, 2, 2, 2, 2, 4, 2, 2, 2, 2, 8, 2, 2, 2, 2, 2, 2, 2, 2, 2],
 [4, 2, 4, 2, 4, 2, 2, 4, 2, 4, 4, 2, 4, 2, 4, 4, 2, 4, 2, 4, 4, 2],
 [4, 2, 4, 2, 2, 4, 2, 4, 2, 4, 4, 2, 2, 2, 2, 4, 2, 4, 2, 4, 4, 2],
 [2, 2, 4, 2, 2, 2, 2, 8, 2, 2, 2, 2, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2],
 [4, 4, 2, 4, 4, 4, 8, 8, 8, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4],
 [2, 2, 4, 2, 2, 2, 2, 8, 2, 2, 2, 2, 2, 2, 2, 2, 2, 4, 2, 2, 2, 2],
 [4, 2, 4, 2, 4, 4, 2, 4, 2, 4, 4, 2, 4, 2, 4, 2, 2, 4, 2, 4, 4, 2],
 [4, 2, 4, 2, 4, 2, 2, 4, 2, 4, 4, 2, 2, 2, 4, 4, 2, 4, 2, 4, 2, 2],
 [2, 2, 2, 2, 2, 2, 2, 8, 2, 2, 2, 2, 4, 2, 2, 2, 2, 8, 2, 2, 2, 2],
 [4, 4, 4, 4, 4, 4, 8, 8, 8, 2, 4, 2, 4, 4, 4, 4, 8, 8, 8, 2, 4, 2],
 [2, 2, 4, 2, 2, 2, 2, 8, 2, 2, 2, 2, 4, 2, 2, 2, 2, 8, 2, 2, 2, 2],
 [4, 2, 4, 2, 4, 4, 2, 4, 2, 4, 4, 2, 4, 2, 2, 4, 2, 2, 2, 4, 4, 2],
 [4, 2, 4, 2, 4, 4, 2, 4, 2, 4, 2, 2, 4, 2, 4, 4, 2, 2, 2, 4, 4, 2],
 [2, 2, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 4, 2, 2, 2, 2, 4, 2, 2, 2, 2]]

============================================================
Phase: test_predict
============================================================
[[4, 2, 4, 2, 4, 4, 2, 4, 2, 4, 4, 2, 4, 2, 4, 2, 2, 4, 2, 4, 4, 2],
 [2, 2, 8, 2, 2, 2, 2, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 4, 2, 2, 2, 2],
 [4, 8, 8, 8, 4, 4, 4, 2, 4, 4, 2, 4, 4, 4, 4, 2, 4, 4, 2, 2, 4, 2],
 [2, 2, 8, 2, 2, 2, 2, 4, 2, 2, 2, 2, 4, 2, 2, 2, 2, 4, 2, 2, 2, 2],
 [4, 2, 4, 2, 2, 4, 2, 2, 2, 4, 2, 2, 4, 2, 4, 2, 2, 4, 2, 4, 4, 2],
 [4, 2, 4, 2, 2, 4, 2, 2, 2, 4, 4, 2, 4, 2, 4, 4, 2, 4, 2, 2, 4, 2],
 [2, 2, 8, 2, 2, 2, 2, 4, 2, 2, 2, 2, 8, 2, 2, 2, 2, 4, 2, 2, 2, 2],
 [4, 8, 8, 8, 2, 4, 4, 2, 4, 2, 4, 8, 8, 8, 4, 4, 4, 2, 2, 4, 4, 4],
 [2, 2, 8, 2, 2, 2, 2, 4, 2, 2, 2, 2, 8, 2, 2, 2, 2, 2, 2, 2, 2, 2],
 [4, 2, 4, 2, 4, 2, 2, 4, 2, 4, 4, 2, 4, 2, 4, 4, 2, 4, 2, 4, 4, 2],
 [4, 2, 4, 2, 2, 4, 2, 4, 2, 4, 4, 2, 2, 2, 2, 4, 2, 4, 2, 4, 4, 2],
 [2, 2, 4, 2, 2, 2, 2, 8, 2, 2, 2, 2, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2],
 [4, 4, 2, 4, 4, 4, 8, 8, 8, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4],
 [2, 2, 4, 2, 2, 2, 2, 8, 2, 2, 2, 2, 2, 2, 2, 2, 2, 4, 2, 2, 2, 2],
 [4, 2, 4, 2, 4, 4, 2, 4, 2, 4, 4, 2, 4, 2, 4, 2, 2, 4, 2, 4, 4, 2],
 [4, 2, 4, 2, 4, 2, 2, 4, 2, 4, 4, 2, 2, 2, 4, 4, 2, 4, 2, 4, 2, 2],
 [2, 2, 2, 2, 2, 2, 2, 8, 2, 2, 2, 2, 4, 2, 2, 2, 2, 8, 2, 2, 2, 2],
 [4, 4, 4, 4, 4, 4, 8, 8, 8, 2, 4, 2, 4, 4, 4, 4, 8, 8, 8, 2, 4, 2],
 [2, 2, 4, 2, 2, 2, 2, 8, 2, 2, 2, 2, 4, 2, 2, 2, 2, 8, 2, 2, 2, 2],
 [4, 2, 4, 2, 4, 4, 2, 4, 2, 4, 4, 2, 4, 2, 2, 4, 2, 2, 2, 4, 4, 2],
 [4, 2, 4, 2, 4, 4, 2, 4, 2, 4, 2, 2, 4, 2, 4, 4, 2, 2, 2, 4, 4, 2],
 [2, 2, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 4, 2, 2, 2, 2, 4, 2, 2, 2, 2]]
